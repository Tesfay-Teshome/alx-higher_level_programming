``matrix_mul(m_a, m_b)`` a list of lists result of the dot
multiplication of two matrices

Import function
=================

    >>> matrix_mul = __import__("100-matrix_mul").matrix_mul

Valid matrices different sizes
===============================

Integers

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]

    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
    [[58, 64], [139, 154]]

    >>> matrix_mul([[2, 0], [1, 2]], [[1, 2], [8, 21]])
    [[2, 4], [17, 44]]

    >>> matrix_mul([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [2], [3]])
    [[1], [2], [3]]

    >>> matrix_mul([[0]], [[1]])
    [[0]]

Negatives

    >>> matrix_mul([[-1, 2, -3]], [[4], [-5], [6]])
    [[-32]]


Floats

    >>> matrix_mul([[2, 0.4], [1, 2.6]], [[1, 2.2], [3, 4]])
    [[3.2, 6.0], [8.8, 12.600000000000001]]

    >>> matrix_mul([[-2.0]], [[4.0]])
    [[-8.0]]

Mixed

    >>> matrix_mul([[3, -4, 2.5]], [[1.3, 9, -7, 1.45], [8, -7, 4, 6.1], [6, 4.8, 0.01, 3]])
    [[-13.100000000000001, 67.0, -36.975, -12.549999999999997]]


Arguments not a list
=====================

Tuple

    >>> matrix_mul((1, 2), [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1]], (1, 2))
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list

Set

    >>> matrix_mul({1, 2}, [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1]], {1, 2})
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list

Dictionary

    >>> matrix_mul({1: 2}, [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1]], {1: 2})
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list

String

    >>> matrix_mul("2, 3", [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1]], "2, 3")
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list

None

    >>> matrix_mul(None, [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1]], None)
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list


Arguments not a list of lists
===============================

Tuple

    >>> matrix_mul([(1, 2), [2]], [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1]], [(1, 2), [2]])
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list of lists


Set

    >>> matrix_mul([{1, 2}], [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1]], [{1, 2}])
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list of lists

Dictionary

    >>> matrix_mul([{1: 2}], [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1]], [{1: 2}])
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list of lists

String

    >>> matrix_mul(["2, 3"], [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1]], ["2, 3"])
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list of lists

None

    >>> matrix_mul([None], [[1]])
    Traceback (most recent call last):
              ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1]], [None])
    Traceback (most recent call last):
              ...
    TypeError: m_b must be a list of lists


Empty List or Empty List of Lists
===================================

Empty List

   >>> matrix_mul([], [[1, 2]])
   Traceback (most recent call last):
             ...
   ValueError: m_a can't be empty


   >>> matrix_mul([[1, 2]], [])
   Traceback (most recent call last):
             ...
   ValueError: m_b can't be empty

Empty List of Lists

   >>> matrix_mul([[]], [[1, 2]])
   Traceback (most recent call last):
             ...
   ValueError: m_a can't be empty

   >>> matrix_mul([[1, 2]], [[]])
   Traceback (most recent call last):
             ...
   ValueError: m_b can't be empty


List inside List contains types not float or int
=================================================

Tuple

    >>> matrix_mul([[1, 2], [3, (4, 2)]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, (4, 2)]])
    Traceback (most recent call last):
              ...
    TypeError: m_b should contain only integers or floats


String

    >>> matrix_mul([[1, 2], [3, '4']], [[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, '4']])
    Traceback (most recent call last):
              ...
    TypeError: m_b should contain only integers or floats

Set

    >>> matrix_mul([[1, 2], [3, {4, 2}]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, {4, 2}]])
    Traceback (most recent call last):
              ...
    TypeError: m_b should contain only integers or floats

Dictionary


    >>> matrix_mul([[1, 2], [3, {4: 2}]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, {4: 2}]])
    Traceback (most recent call last):
              ...
    TypeError: m_b should contain only integers or floats

None

    >>> matrix_mul([[1, 2], [3, None]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, None]])
    Traceback (most recent call last):
              ...
    TypeError: m_b should contain only integers or floats


Not square matrices
====================


   >>> matrix_mul([[1], [1, 2]], [[1]])
   Traceback (most recent call last):
             ...
   TypeError: each row of m_a must be of the same size


   >>> matrix_mul([[1]], [[1], [1, 2]])
   Traceback (most recent call last):
             ...
   TypeError: each row of m_b must be of the same size


   >>> matrix_mul([[], [1, 2]], [[1]])
   Traceback (most recent call last):
             ...
   TypeError: each row of m_a must be of the same size


   >>> matrix_mul([[1]], [[1], []])
   Traceback (most recent call last):
             ...
   TypeError: each row of m_b must be of the same size




Columns of m_a != rows of m_b
==============================


   >>> matrix_mul([[1]], [[1, 2], [1, 2]])
   Traceback (most recent call last):
             ...
   ValueError: m_a and m_b can't be multiplied


   >>> matrix_mul([[1, 2], [1, 2]], [[1]])
   Traceback (most recent call last):
             ...
   ValueError: m_a and m_b can't be multiplied


No Arguments Given
===================

Missing 1 argument

   >>> matrix_mul([[1]])
   Traceback (most recent call last):
             ...
   TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Missing 2 arguments


   >>> matrix_mul()
   Traceback (most recent call last):
             ...
   TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
